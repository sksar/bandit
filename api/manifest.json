{"__page":{"path":"/","queries":[],"content":"![Bandit](https://github.com/mtrudel/bandit/raw/main/assets/readme_logo.png#gh-light-mode-only)\n![Bandit](https://github.com/mtrudel/bandit/raw/main/assets/readme_logo-darkmode.png#gh-dark-mode-only)\n\n[![Build Status](https://github.com/mtrudel/bandit/workflows/Elixir%20CI/badge.svg)](https://github.com/mtrudel/bandit/actions)\n[![Docs](https://img.shields.io/badge/api-docs-green.svg?style=flat)](https://hexdocs.pm/bandit)\n[![Hex.pm](https://img.shields.io/hexpm/v/bandit.svg?style=flat&color=blue)](https://hex.pm/packages/bandit)\n\nBandit is an HTTP server for Plug and WebSock apps.\n\nBandit is written entirely in Elixir and is built atop [Thousand\nIsland](https://github.com/mtrudel/thousand_island). It can serve HTTP/1.x,\nHTTP/2 and WebSocket clients over both HTTP and HTTPS. It is written with\ncorrectness, clarity & performance as fundamental goals.\n\nIn [ongoing automated performance\ntests](https://github.com/mtrudel/bandit/actions/runs/4449308920),\nBandit's HTTP/1.x engine is up to 4x faster than Cowboy depending on the number of concurrent\nrequests. When comparing HTTP/2 performance, Bandit is up to 1.5x faster than Cowboy. This is\npossible because Bandit has been built from the ground up for use with Plug applications; this\nfocus pays dividends in both performance and also in the approachability of the code base.\n\nBandit also emphasizes correctness. Its HTTP/2 implementation scores 100% on the\n[h2spec](https://github.com/summerwind/h2spec) suite in strict mode, and its\nWebSocket implementation scores 100% on the\n[Autobahn](https://github.com/crossbario/autobahn-testsuite) test suite, both of\nwhich run as part of Bandit's comprehensive CI suite. Extensive unit test,\ncredo, dialyzer, and performance regression test coverage round out a test suite\nthat ensures that Bandit is and will remain a platform you can count on.\n\nLastly, Bandit exists to demystify the lower layers of infrastructure code. In a world where\nThe New Thing is nearly always adding abstraction on top of abstraction, it's important to have\nfoundational work that is approachable & understandable by users above it in the stack.\n\n## Project Goals\n\n* Implement comprehensive support for HTTP/1.0 through HTTP/2 & WebSockets (and\n  beyond) backed by obsessive RFC literacy and automated conformance testing\n* Aim for minimal internal policy and HTTP-level configuration. Delegate to Plug & WebSock as much as\n  possible, and only interpret requests to the extent necessary to safely manage a connection\n  & fulfill the requirements of safely supporting protocol correctness\n* Prioritize (in order): correctness, clarity, performance. Seek to remove the mystery of\n  infrastructure code by being approachable and easy to understand\n* Along with our companion library [Thousand\n  Island](https://github.com/mtrudel/thousand_island), become the go-to HTTP\n  & low-level networking stack of choice for the Elixir community by being\n  reliable, efficient, and approachable\n\n## Project Status\n\n* Complete support for [Phoenix](https://github.com/phoenixframework/phoenix) applications (WebSocket\n  support requires Phoenix 1.7+)\n* Complete support of the [Plug API](https://github.com/elixir-plug/plug)\n* Complete support of the [WebSock API](https://github.com/phoenixframework/websock)\n* Complete server support for HTTP/1.x as defined in [RFC\n  9112](https://datatracker.ietf.org/doc/html/rfc9112) & [RFC\n  9110](https://datatracker.ietf.org/doc/html/rfc9110)\n* Complete server support for HTTP/2 as defined in [RFC\n  9113](https://datatracker.ietf.org/doc/html/rfc9113) & [RFC\n  9110](https://datatracker.ietf.org/doc/html/rfc9110), comprehensively covered\n  by automated [h2spec](https://github.com/summerwind/h2spec) conformance\n  testing. Though deprecated by later RFCs, Bandit also supports h2c upgrades as\n  specified in [RFC7540](https://datatracker.ietf.org/doc/html/rfc7540)\n* Support for HTTP content encoding compression on both HTTP/1.x and HTTP/2.\n  gzip and deflate methods are supported per\n  [RFC9110ยง8.4.1.{2,3}](https://www.rfc-editor.org/rfc/rfc9110.html#section-8.4.1.2)\n* Complete server support for WebSockets as defined in [RFC\n  6455](https://datatracker.ietf.org/doc/html/rfc6455), comprehensively covered by automated\n  [Autobahn](https://github.com/crossbario/autobahn-testsuite) conformance testing. Per-message\n  compression as defined in [RFC 7692](https://datatracker.ietf.org/doc/html/rfc7692) is also\n  supported\n* Extremely scalable and performant client handling at a rate up to 4x that of Cowboy for the same\n  workload with as-good-or-better memory use\n\nAny Phoenix or Plug app should work with Bandit as a drop-in replacement for\nCowboy; exceptions to this are errors (if you find one, please [file an\nissue!](https://github.com/mtrudel/bandit/issues)).\n\n<!-- MDOC -->\n\n## Using Bandit With Phoenix\n\nBandit fully supports Phoenix. Phoenix applications which use WebSockets for\nfeatures such as Channels or LiveView require Phoenix 1.7 or later.\n\nUsing Bandit to host your Phoenix application couldn't be simpler:\n\n1. Add Bandit as a dependency in your Phoenix application's `mix.exs`:\n\n    ```code\n    {:bandit, \"~> 1.0\"}\n    ```\n2. Add the following `adapter:` line to your endpoint configuration in `config/config.exs`, as in the following example:\n\n     ```code\n     # config/config.exs\n\n     config :your_app, YourAppWeb.Endpoint,\n       adapter: Bandit.PhoenixAdapter, # <---- ADD THIS LINE\n       url: [host: \"localhost\"],\n       render_errors: ...\n     ```\n3. That's it! **You should now see messages at startup indicating that Phoenix is\n   using Bandit to serve your endpoint**, and everything should 'just work'. Note\n   that if you have set any exotic configuration options within your endpoint,\n   you may need to update that configuration to work with Bandit; see the\n   [Bandit.PhoenixAdapter](https://hexdocs.pm/bandit/Bandit.PhoenixAdapter.html)\n   documentation for more information.\n\n## Using Bandit With Plug Applications\n\nUsing Bandit to host your own Plug is very straightforward. Assuming you have\na Plug module implemented already, you can host it within Bandit by adding\nsomething similar to the following to your application's `Application.start/2`\nfunction:\n\n```code\n# lib/my_app/application.ex\n\ndefmodule MyApp.Application do\n  use Application\n\n  def start(_type, _args) do\n    children = [\n      {Bandit, plug: MyApp.MyPlug}\n    ]\n\n    opts = [strategy: :one_for_one, name: MyApp.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\nend\n```\n\nFor less formal usage, you can also start Bandit using the same configuration\noptions via the `Bandit.start_link/1` function:\n\n```code\n# Start an http server on the default port 4000, serving MyApp.MyPlug\nBandit.start_link(plug: MyPlug)\n```\n\n## Configuration\n\nA number of options are defined when starting a server. The complete list is\ndefined by the [`t:Bandit.options/0`](https://hexdocs.pm/bandit/Bandit.html#summary) type.\n\n## Setting up an HTTPS Server\n\nBy far the most common stumbling block encountered when setting up an HTTPS\nserver involves configuring key and certificate data. Bandit is comparatively\neasy to set up in this regard, with a working example looking similar to the\nfollowing:\n\n```code\n# lib/my_app/application.ex\n\ndefmodule MyApp.Application do\n  use Application\n\n  def start(_type, _args) do\n    children = [\n      {Bandit,\n       plug: MyApp.MyPlug,\n       scheme: :https,\n       certfile: \"/absolute/path/to/cert.pem\",\n       keyfile: \"/absolute/path/to/key.pem\"}\n    ]\n\n    opts = [strategy: :one_for_one, name: MyApp.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\nend\n```\n\n## WebSocket Support\n\nIf you're using Bandit to run a Phoenix application as suggested above, there is\nnothing more for you to do; WebSocket support will 'just work'.\n\nIf you wish to interact with WebSockets at a more fundamental level, the\n[WebSock](https://hexdocs.pm/websock/WebSock.html) and\n[WebSockAdapter](https://hexdocs.pm/websock_adapter/WebSockAdapter.html) libraries\nprovides a generic abstraction for WebSockets (very similar to how Plug is\na generic abstraction on top of HTTP). Bandit fully supports all aspects of\nthese libraries.\n\n<!-- MDOC -->\n\n## Implementation Details\n\nBandit primarily consists of three protocol-specific implementations, one each\nfor [HTTP/1][], [HTTP/2][] and [WebSockets][]. Each of these implementations is\nlargely distinct from one another, and is described in its own README linked\nabove.\n\nIf you're just taking a casual look at Bandit or trying to understand how an\nHTTP server works, the [HTTP/1][] implementation is likely the best place to\nstart exploring.\n\n[HTTP/1]: lib/bandit/http1/README.md\n[HTTP/2]: lib/bandit/http2/README.md\n[WebSockets]: lib/bandit/websocket/README.md\n\n## Contributing\n\nContributions to Bandit are very much welcome! Before undertaking any substantial work, please\nopen an issue on the project to discuss ideas and planned approaches so we can ensure we keep\nprogress moving in the same direction.\n\nAll contributors must agree and adhere to the project's [Code of\nConduct](https://github.com/mtrudel/bandit/blob/main/CODE_OF_CONDUCT.md).\n\nSecurity disclosures should be handled per Bandit's published [security policy](https://github.com/mtrudel/bandit/blob/main/SECURITY.md).\n\n## Installation\n\nBandit is [available in Hex](https://hex.pm/docs/publish). The package can be installed\nby adding `bandit` to your list of dependencies in `mix.exs`:\n\n```code\ndef deps do\n  [\n    {:bandit, \"~> 1.0\"}\n  ]\nend\n```\n\nDocumentation can be found at [https://hexdocs.pm/bandit](https://hexdocs.pm/bandit).\n\n# License\n\nMIT\n"},"- Hex Docs":{"__page":{"path":"/- Hex Docs","queries":[],"content":"<script>\n    setTimeout(() =>{\n        // Open Hex Docs in new tab - https://hexdocs.pm/bandit\n        window.open('https://hexdocs.pm/bandit', '_blank');\n\n        // Navigate Back\n        window.history.back();\n    }, 500);\n</script>"}},"benchmarks":{"1. HTTP 1":{"__page":{"path":"/benchmarks/1. HTTP 1","frontMatter":{"title":"HTTP/1.1 Benchmarks","protocol":"http/1.1"},"queries":[{"id":"test_endpoints","compiledQueryString":"SELECT DISTINCT \"Test endpoint\" as item\nFROM results.data\nWHERE \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","inputQueryString":"SELECT DISTINCT \"Test endpoint\" as item\nFROM results.data\nWHERE \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","compiled":false,"inline":true},{"id":"query","compiledQueryString":"SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\",\n    \"Time to connect (mean)\",\n    \"Time to first byte (mean)\",\n    \"Time to request (mean)\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","inputQueryString":"SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\",\n    \"Time to connect (mean)\",\n    \"Time to first byte (mean)\",\n    \"Time to request (mean)\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","compiled":false,"inline":true},{"id":"rps","compiledQueryString":"SELECT * FROM\n(SELECT max(\"Requests per second (max)\") as rps_bandit, FROM (SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\",\n    \"Time to connect (mean)\",\n    \"Time to first byte (mean)\",\n    \"Time to request (mean)\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')) WHERE server = 'bandit'),\n(SELECT max(\"Requests per second (max)\") as rps_cowboy, FROM (SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\",\n    \"Time to connect (mean)\",\n    \"Time to first byte (mean)\",\n    \"Time to request (mean)\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')) WHERE server = 'cowboy')","inputQueryString":"SELECT * FROM\n(SELECT max(\"Requests per second (max)\") as rps_bandit, FROM ${query} WHERE server = 'bandit'),\n(SELECT max(\"Requests per second (max)\") as rps_cowboy, FROM ${query} WHERE server = 'cowboy')","compiled":true,"inline":true}],"content":"---\ntitle: \"HTTP/1.1 Benchmarks\"\nprotocol: \"http/1.1\"\n---\n\n<script>\n    const colors = ['#8ABD00', '#027BCE'];\n</script>\n\n<br />\n\n```sql test_endpoints\nSELECT DISTINCT \"Test endpoint\" as item\nFROM results.data\nWHERE \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')\n```\n\n<div class=\"flex justify-between items-center mb-4\">\n    <h2 class=\"capitalize markdown\">\n        {inputs.test_endpoint} Benchmarks\n    </h2>\n    <Dropdown\n        title=\"Select Endpoint\"\n        name=\"test_endpoint\"\n        data={test_endpoints}\n        label=\"item\"\n        value=\"item\"\n        default='download'\n    />\n</div>\n\n\n```sql query\nSELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\",\n    \"Time to connect (mean)\",\n    \"Time to first byte (mean)\",\n    \"Time to request (mean)\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')\n```\n\n<!--  -->\n\n```sql rps\nSELECT * FROM\n(SELECT max(\"Requests per second (max)\") as rps_bandit, FROM ${query} WHERE server = 'bandit'),\n(SELECT max(\"Requests per second (max)\") as rps_cowboy, FROM ${query} WHERE server = 'cowboy')\n```\n\n### Highest Requests Per Second\n<BigValue title=\"Bandit\" data={rps} value=\"rps_bandit\" maxWidth='10em' />\n<BigValue title=\"Cowboy\" data={rps} value=\"rps_cowboy\" maxWidth='10em' />\n<br/>\n<br/>\n\n<LineChart\n    title=\"Requests Per Second - {inputs.test_endpoint}\"\n    subtitle=\"(Higher is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Requests per second (mean)\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Requests per second (mean)\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>\n\n<LineChart\n    title=\"Number of 2XX Responses - {inputs.test_endpoint}\"\n    subtitle=\"(Higher is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Number of 2xx responses\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Number of 2xx responses\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>\n\n<LineChart \n    title=\"Time to Connect (mean) - {inputs.test_endpoint}\"\n    subtitle=\"(Lower is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Time to connect (mean)\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Time to connect (mean)\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>\n\n<LineChart \n    title=\"Time to First Byte (mean) - {inputs.test_endpoint}\"\n    subtitle=\"(Lower is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Time to first byte (mean)\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Time to first byte (mean)\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>\n\n<LineChart\n    title=\"Time to Request (mean) - {inputs.test_endpoint}\"\n    subtitle=\"(Lower is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Time to request (mean)\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Time to request (mean)\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>"}},"2. HTTP 2":{"__page":{"path":"/benchmarks/2. HTTP 2","frontMatter":{"title":"HTTP/2 Benchmarks","protocol":"h2c"},"queries":[{"id":"test_endpoints","compiledQueryString":"SELECT DISTINCT \"Test endpoint\" as item\nFROM results.data\nWHERE \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","inputQueryString":"SELECT DISTINCT \"Test endpoint\" as item\nFROM results.data\nWHERE \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","compiled":false,"inline":true},{"id":"query","compiledQueryString":"SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\",\n    \"Time to connect (mean)\",\n    \"Time to first byte (mean)\",\n    \"Time to request (mean)\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","inputQueryString":"SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\",\n    \"Time to connect (mean)\",\n    \"Time to first byte (mean)\",\n    \"Time to request (mean)\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","compiled":false,"inline":true},{"id":"rps","compiledQueryString":"SELECT * FROM\n(SELECT max(\"Requests per second (max)\") as rps_bandit, FROM (SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\",\n    \"Time to connect (mean)\",\n    \"Time to first byte (mean)\",\n    \"Time to request (mean)\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')) WHERE server = 'bandit'),\n(SELECT max(\"Requests per second (max)\") as rps_cowboy, FROM (SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\",\n    \"Time to connect (mean)\",\n    \"Time to first byte (mean)\",\n    \"Time to request (mean)\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')) WHERE server = 'cowboy')","inputQueryString":"SELECT * FROM\n(SELECT max(\"Requests per second (max)\") as rps_bandit, FROM ${query} WHERE server = 'bandit'),\n(SELECT max(\"Requests per second (max)\") as rps_cowboy, FROM ${query} WHERE server = 'cowboy')","compiled":true,"inline":true}],"content":"---\ntitle: \"HTTP/2 Benchmarks\"\nprotocol: \"h2c\"\n---\n\n<script>\n    const colors = ['#8ABD00', '#027BCE'];\n</script>\n\n<br />\n\n```sql test_endpoints\nSELECT DISTINCT \"Test endpoint\" as item\nFROM results.data\nWHERE \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')\n```\n\n<div class=\"flex justify-between items-center mb-4\">\n    <h2 class=\"capitalize markdown\">\n        {inputs.test_endpoint} Benchmarks\n    </h2>\n    <Dropdown\n        title=\"Select Endpoint\"\n        name=\"test_endpoint\"\n        data={test_endpoints}\n        label=\"item\"\n        value=\"item\"\n        default='download'\n    />\n</div>\n\n\n```sql query\nSELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\",\n    \"Time to connect (mean)\",\n    \"Time to first byte (mean)\",\n    \"Time to request (mean)\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')\n```\n\n<!--  -->\n\n```sql rps\nSELECT * FROM\n(SELECT max(\"Requests per second (max)\") as rps_bandit, FROM ${query} WHERE server = 'bandit'),\n(SELECT max(\"Requests per second (max)\") as rps_cowboy, FROM ${query} WHERE server = 'cowboy')\n```\n\n### Highest Requests Per Second\n<BigValue title=\"Bandit\" data={rps} value=\"rps_bandit\" maxWidth='10em' />\n<BigValue title=\"Cowboy\" data={rps} value=\"rps_cowboy\" maxWidth='10em' />\n<br/>\n<br/>\n\n<LineChart\n    title=\"Requests Per Second - {inputs.test_endpoint}\"\n    subtitle=\"(Higher is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Requests per second (mean)\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Requests per second (mean)\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>\n\n<LineChart\n    title=\"Number of 2XX Responses - {inputs.test_endpoint}\"\n    subtitle=\"(Higher is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Number of 2xx responses\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Number of 2xx responses\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>\n\n<LineChart \n    title=\"Time to Connect (mean) - {inputs.test_endpoint}\"\n    subtitle=\"(Lower is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Time to connect (mean)\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Time to connect (mean)\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>\n\n<LineChart \n    title=\"Time to First Byte (mean) - {inputs.test_endpoint}\"\n    subtitle=\"(Lower is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Time to first byte (mean)\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Time to first byte (mean)\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>\n\n<LineChart\n    title=\"Time to Request (mean) - {inputs.test_endpoint}\"\n    subtitle=\"(Lower is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Time to request (mean)\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Time to request (mean)\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>"}},"3. WebSocket":{"__page":{"path":"/benchmarks/3. WebSocket","frontMatter":{"title":"WebSocket Benchmarks","protocol":"ws"},"queries":[{"id":"test_endpoints","compiledQueryString":"SELECT DISTINCT \"Test endpoint\" as item\nFROM results.data\nWHERE \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","inputQueryString":"SELECT DISTINCT \"Test endpoint\" as item\nFROM results.data\nWHERE \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","compiled":false,"inline":true},{"id":"query","compiledQueryString":"SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","inputQueryString":"SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')","compiled":false,"inline":true},{"id":"rps","compiledQueryString":"SELECT * FROM\n(SELECT max(\"Requests per second (max)\") as rps_bandit, FROM (SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')) WHERE server = 'bandit'),\n(SELECT max(\"Requests per second (max)\") as rps_cowboy, FROM (SELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')) WHERE server = 'cowboy')","inputQueryString":"SELECT * FROM\n(SELECT max(\"Requests per second (max)\") as rps_bandit, FROM ${query} WHERE server = 'bandit'),\n(SELECT max(\"Requests per second (max)\") as rps_cowboy, FROM ${query} WHERE server = 'cowboy')","compiled":true,"inline":true}],"content":"---\ntitle: \"WebSocket Benchmarks\"\nprotocol: \"ws\"\n---\n\n<script>\n    const colors = ['#8ABD00', '#027BCE'];\n</script>\n\n<br />\n\n```sql test_endpoints\nSELECT DISTINCT \"Test endpoint\" as item\nFROM results.data\nWHERE \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')\n```\n\n<div class=\"flex justify-between items-center mb-4\">\n    <h2 class=\"capitalize markdown\">\n        {inputs.test_endpoint} Benchmarks\n    </h2>\n    <Dropdown\n        title=\"Select Endpoint\"\n        name=\"test_endpoint\"\n        data={test_endpoints}\n        label=\"item\"\n        value=\"item\"\n        default='download'\n    />\n</div>\n\n\n```sql query\nSELECT \"server\" as server, \n    \"Number of clients\", \n    \"Requests per second (mean)\",\n    \"Requests per second (max)\",\n    \"Number of 2xx responses\"\nFROM results.data\nWHERE \"Test endpoint\" = '${inputs.test_endpoint}'\nAND \"Protocol\" = '${protocol}'\nAND \"Treeish\" in ('master', 'main')\n```\n\n<!--  -->\n\n```sql rps\nSELECT * FROM\n(SELECT max(\"Requests per second (max)\") as rps_bandit, FROM ${query} WHERE server = 'bandit'),\n(SELECT max(\"Requests per second (max)\") as rps_cowboy, FROM ${query} WHERE server = 'cowboy')\n```\n\n### Highest Requests Per Second\n<BigValue title=\"Bandit\" data={rps} value=\"rps_bandit\" maxWidth='10em' />\n<BigValue title=\"Cowboy\" data={rps} value=\"rps_cowboy\" maxWidth='10em' />\n<br/>\n<br/>\n\n<LineChart\n    title=\"Requests Per Second - {inputs.test_endpoint}\"\n    subtitle=\"(Higher is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Requests per second (max)\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Requests per second (max)\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/>\n\n<!-- <LineChart\n    title=\"Number of 2XX Responses - {inputs.test_endpoint}\"\n    subtitle=\"(Higher is better)\"\n    data={query}\n    series=\"server\"\n    x=\"Number of clients\"\n    y=\"Number of 2xx responses\"\n    xAxisTitle=\"Number of clients\"\n    yAxisTitle=\"Number of 2xx responses\"\n    xGridlines=true\n    yBaseline=true\n    colorPalette={colors}\n/> -->\n"}},"~ Raw Data":{"__page":{"path":"/benchmarks/~ Raw Data","frontMatter":{"title":"RAW Benchmark Results"},"queries":[{"id":"raw_data","compiledQueryString":"SELECT * FROM results.data","inputQueryString":"SELECT * FROM results.data","compiled":false,"inline":true}],"content":"---\ntitle: RAW Benchmark Results\n---\n\n```sql raw_data\nSELECT * FROM results.data\n```\n\n<DataTable data=\"{raw_data}\" search=\"true\" />"}}},"changelog":{"__page":{"path":"/changelog","queries":[],"content":"## 1.3.0 (TBD)\n\n### Enhancements\n\n* Complete refactor of HTTP/2. Improved process model is MUCH easier to\n  understand and yields about a 10% performance boost to HTTP/2 requests (#286)\n\n### Changes\n\n* **BREAKING CHANGE** The HTTP/2 header size limit options have been deprecated,\n  and have been replaced with a single `max_header_block_size` option. The setting\n  defaults to 50k bytes, and refers to the size of the compressed header block\n  as sent on the wire (including any continuation frames)\n* We no longer log if processes that are linked to an HTTP/2 stream process\n  terminate unexpectedly. This has always been unspecified behaviour so is not\n  considered a breaking change\n* Calls of `Plug.Conn` functions for an HTTP/2 connection must now come from the\n  stream process; any other process will raise an error. Again, this has always\n  been unspecified behaviour\n* Reading the body of an HTTP/2 request after it has already been read will\n  return `{:ok, \"\"}` instead of raising a `Bandit.BodyAlreadyReadError` as it\n  previously did\n* We now send RST_STREAM frames if we complete a stream and the remote end is\n  still open. This optimizes cases where the client may still be sending a body\n  that we never consumed and don't care about\n* We no longer explicitly close the connection when we receive a GOAWAY frame\n\n## 1.2.0 (31 Jan 2024)\n\n### Enhancements\n\n* Automatically pull in `:otp_app` value in Bandit.PhoenixAdapter (thanks\n  @krns!)\n* Include response body metrics for HTTP/1 chunk responses\n\n### Fixes\n\n* Fix broken HTTP/1 inform/3 return value (thanks @wojtekmach!)\n* Maintain HTTP/1 read timeout after receiving unknown messages\n\n## 1.1.3 (12 Jan 2024)\n\n### Fixes\n\n* Do not send a fallback response if the plug has already sent one (#288 & #289, thanks @jclem!)\n\n### Changes\n\n* Packagaing improvements (#283, thanks @wojtekmach!)\n\n## 1.1.2 (20 Dec 2023)\n\n### Fixes\n\n* Fix support for proplist-style arguments (#277, thanks @jjcarstens!)\n* Speed up WebSocket framing (#272, thanks @crertel!)\n* Fix off-by-one error in HTTP2 sendfile (#269, thanks @OrangeDrangon!)\n* Improve mix file packaging (#266, thanks @patrickjaberg!)\n\n## 1.1.1 (14 Nov 2023)\n\n### Fixes\n\n* Do not advertise disabled protocols via ALPN (#263)\n\n## 1.1.0 (2 Nov 2023)\n\n### Changes\n\n* Messages sent to Bandit HTTP/1 handlers no longer intentionally crash the\n  handler process but are now logged in the same manner as messages sent to a\n  no-op GenServer (#259)\n* Messages regarding normal termination of monitored processes are no longer\n  handled by the WebSocket handler, but are now passed to the configured\n  `c:WebSock.handle_info/2` callback (#259)\n\n### Enhancements\n\n* Add support for `Phoenix.Endpoint.server_info/1` (now in Phoenix main; #258)\n* Add support for `:max_heap_size` option in WebSocket handler (introduced in\n  websock_adapter 0.5.5; #255, thanks @v0idpwn!)\n\n## 1.0.0 (18 Oct 2023)\n\n### Changes\n\n* Remove internal tracking of remote `max_concurrent_streams` setting (#248)\n\n## 1.0.0-pre.18 (10 Oct 2023)\n\n### Fixes\n\n* Fix startup when plug module has not yet been loaded by the BEAM\n\n## 1.0.0-pre.17 (9 Oct 2023)\n\n### Enhancements\n\n* Support function based plugs & improve startup analysis of plug configuration\n  (#236)\n* Improve keepalive support when Plug does not read request bodies (#244)\n* Improve logic around not sending bodies on HEAD requests (#242)\n\n### Changes\n\n* Internal refactor of WebSocket validation (#229)\n\n\n## 1.0.0-pre.16 (18 Sep 2023)\n\n### Changes\n\n* Use protocol default port in the event that no port is provided in host header (#228)\n\n### Fixes\n\n* Improve handling of iolist response bodies (#231, thanks @travelmassive!)\n\n## 1.0.0-pre.15 (9 Sep 2023)\n\n### Fixes\n\n* Fix issue with setting remote IP at connection startup (#227, thanks @jimc64!)\n\n## 1.0.0-pre.14 (28 Aug 2023)\n\n### Enhancements\n\n* Add `Bandit.PhoenixAdapter.bandit_pid/2` (#212)\n* Return errors to `Plug.Conn.Adapter.chunk/2` HTTP/1 calls (#216)\n\n### Changes\n\n* `Plug.Conn` function calls must come from the process on which `Plug.call/2` was called (#217, reverts #117)\n\n## 1.0.0-pre.13 (15 Aug 2023)\n\n### Enhancements\n\n* Add ability to send preamble frames when closing a WebSock connection (#211)\n\n## 1.0.0-pre.12 (12 Aug 2023)\n\n## Fixes\n\n* Bump ThousandIsland to 1.0.0-pre.7 to fix leaking file descriptors on\n  `Plug.Conn.sendfile/5` calls (thanks @Hermanverschooten!)\n\n## 1.0.0-pre.11 (11 Aug 2023)\n\n## Changes\n\n* **BREAKING CHANGE** Move `conn` value in telemetry events from measurements to metadata\n\n## Enhancements\n\n* Add `method`, `request_target` and `status` fields to telemetry metadata on HTTP stop events\n* Improve RFC compliance regarding cache-related headers on deflated responses (#207, thanks @tanguilp!)\n* Bump to Thousand Island `1.0.0-pre.6`\n* Doc improvements (particularly around implementation notes)\n* Typespec improvements (thanks @moogle19!)\n\n## 1.0.0-pre.10 (28 Jun 2023)\n\n## Enhancements\n\n* Add support for `Plug.Conn.inform/3` on HTTP/1 connections (#180)\n* Add support for h2c upgrades (#186, thanks @alisinabh!)\n* Internal refactoring of HTTP/1 content-length encoded body reads (#184, #190,\n  thanks @asakura & @moogle19!)\n\n## Changes\n\n* Bump Thousand Island to 1.0.0-pre.6 (gaining support for suspend/resume API)\n* Drop Elixir 1.12 as a supported target (it should continue to work, but is no\n  longer covered by CI)\n\n## Fixes\n\n* Fix crash when Plug used `Plug.Conn.get_peer_data/1` function on HTTP/1\n  connections (#170, thanks @moogle19!)\n* Fix port behaviour when connecting over unix socket (#176, thanks @asakura\n  & @ibarchenkov!)\n\n## 1.0.0-pre.9 (16 Jun 2023)\n\n## Changes\n\n* Use new ThousandIsland APIs for socket info (#167, thanks @asakura!)\n\n## Fixes\n\n* Handle nil connection close reason when closing a WebSocket\n\n## 1.0.0-pre.8 (15 Jun 2023)\n\n## Fixes\n\n* Further improve logging on WebSocket upgrade errors (#149)\n\n## 1.0.0-pre.7 (14 Jun 2023)\n\n## Enhancements\n\n* Refactor HTTP/1 read routines (#158 & #166, thanks @asakura!)\n* Improve logging on WebSocket upgrade errors (#149)\n\n## Changes\n\n* Override any content-length headers that may have been set by Plug (#165)\n* Send content-length on HTTP/2 responses where appropriate (#165)\n\n## Fixes\n\n* Send correct content-length header when sending deflated response (#151)\n* Do not attempt to deflate if Plug sends a content-encoding header (#165)\n* Improve corner case handling of content-length request header (#163, thanks\n  @ryanwinchester!)\n* Handle case where ThousandIsland returns error tuples on some helper routines\n  (#162)\n\n## 1.0.0-pre.6 (8 Jun 2023)\n\n### Changes\n\n* Always use the declaed scheme if declared in a request-line or `:scheme`\n  pseudo-header (#159)\n* Internal tidying (thanks @asakura!)\n\n## 1.0.0-pre.5 (2 Jun 2023)\n\n### Enhancements\n\n* Total overhaul of typespecs throughout the library (thanks @asakura!)\n\n## 1.0.0-pre.4 (23 May 2023)\n\n### Enhancements\n\n* Performance / correctness improvements to header length validation (#143,\n  thanks @moogle19!)\n* Performance improvements to host header port parsing (#145 & #147, thanks\n  @ryanwinchester!)\n* Improve WebSocket upgrade failure error messages to aid in diagnosis (#152)\n\n### Changes\n\n* Consolidate credo config (#146, thanks @ryanwinchester!)\n\n### Fixes\n\n* Fix error in suggested version dependencies during 1.0-pre series (#142,\n  thanks @cvkmohan!)\n\n## 1.0.0-pre.3 (3 May 2023)\n\n### Enhancements\n\n* Respect read timeout for HTTP/1 keepalives (#140)\n* Support Websock 0.5.1, including support for optional `c:WebSock.terminate/2`\n  (#131)\n\n### Changes\n\n* Use Req instead of Finch in tests (#137)\n* Improve a few corner cases in tests (#136)\n\n## 1.0.0-pre.2 (24 Apr 2023)\n\n### Fixes\n\n* Don't require transport_options to be a keyword list (#130, thanks @justinludwig!)\n\n## 1.0.0-pre.1 (21 Apr 2023)\n\n### Changes\n\n* Update Thousand Island dependency to 1.0-pre\n\n# Changelog for 0.7.x\n\n## 0.7.7 (11 Apr 2023)\n\n### Changes\n\n* Bandit will now raise an error at startup if no plug is specified in config\n  (thanks @moogle19!)\n\n### Fixes\n\n* Fix crash at startup when using `otp_app` option (thanks @moogle19!)\n* Minor doc formatting fixes\n\n## 0.7.6 (9 Apr 2023)\n\n### Changes\n\n* **BREAKING CHANGE** Rename top-level `options` field to `thousand_island_options`\n* **BREAKING CHANGE** Rename `deflate_opts` to `deflate_options` where used\n* Massive overhaul of documentation to use types where possible\n* Bandit now uses a term of the form `{Bandit, ref()}` for `id` in our child spec\n* Bumped to Thousand Island 0.6.7. `num_connections` is now 16384 by default\n\n### Enhancements\n\n* Added top level support for the following convenience parameters:\n  * `port` can now be set at the top level of your configuration\n  * `ip` can now be set at the top level of your configuration\n  * `keyfile` and `certfile` can now be set at the top level of your configuration\n* Transport options are now validated by `Plug.SSL.configure/1` when starting\n  an HTTPS server\n* Rely on Thousand Island to validate options specified in `thousand_island_options`. This should avoid cases like #125 in the future.\n\n## 0.7.5 (4 Apr 2023)\n\n### Changes\n\n* Drop explicit support for Elixir 1.11 since we no longer test it in CI (should\n  still work, just that it's now at-your-own-risk)\n* Add logo to ex_doc and README\n\n### Fixes\n\n* Allow access to Thousand Island's underlying `shutdown_timeout` option\n* Fix test errors that cropped up in OTP 26\n\n\n## 0.7.4 (27 Mar 2023)\n\n### Changes\n\n* Calling `Plug.Conn` adapter functions for HTTP/2 based requests are no longer\n  restricted to being called from the process which called `c:Plug.call/2`\n\n### Enhancements\n\n* Added `startup_log` to control whether / how Bandit logs the bound host & port\n  at startup (Thanks @danschultzer)\n* Improved logging when the configured port is in use at startup (Thanks\n  @danschultzer)\n* Update to Thousand Island 0.6.5\n\n## 0.7.3 (20 Mar 2023)\n\n### Enhancements\n\n* Added advanced `handler_module` configuration option to `options`\n\n### Fixes\n\n* Support returning `x-gzip` as negotiated `content-encoding` (previously would\n  negotiate a request for `x-gzip` as `gzip`)\n\n## 0.7.2 (18 Mar 2023)\n\n### Enhancements\n\n* Added HTTP compression via 'Content-Encoding' negotiation, enabled by default.\n  Configuration is available; see [Bandit\n  docs](https://hexdocs.pm/bandit/Bandit.html#module-config-options) for details\n\n### Changes\n\n* Minor refactor of internal HTTP/2 plumbing. No user visible changes\n\n## 0.7.1 (17 Mar 2023)\n\n### Changes\n\n* Update documentation & messaging to refer to RFC911x RFCs where appropriate\n* Validate top-level config options at startup\n* Revise Phoenix adapter to support new config options\n* Doc updates\n\n## 0.7.0 (17 Mar 2023)\n\n### Enhancements\n\n* Add configuration points for various parameters within the HTTP/1, HTTP/2 and\n  WebSocket stacks. See [Bandit\n  docs](https://hexdocs.pm/bandit/Bandit.html#module-config-options) for details\n\n# Changelog for 0.6.x\n\n## 0.6.11 (17 Mar 2023)\n\n### Changes\n\n* Modified telemetry event payloads to match the conventions espoused by\n  `:telemetry.span/3`\n* Default shutdown timeout is now 15s (up from 5s)\n\n### Enhancements\n\n* Update to Thosuand Island 0.6.4 (from 0.6.2)\n\n## 0.6.10 (10 Mar 2023)\n\n### Enhancements\n\n* Support explicit setting of WebSocket close codes & reasons as added in WebSock\n0.5.0\n\n## 0.6.9 (20 Feb 2023)\n\n### Enhancements\n\n* Add comprehensive Telemetry support within Bandit, as documented in the\n  `Bandit.Telemetry` module\n* Update our ThousandIsland dependnecy to pull in Thousand Island's newly\n  updated Telemetry support as documented in the `ThousandIsland.Telemetry`\n  module\n* Fix parsing of host / request headers which contain IPv6 addresses (#97).\n  Thanks @derekkraan!\n\n# Changes\n\n* Use Plug's list of response code reason phrases (#96). Thanks @jclem!\n* Minor doc updates\n\n## 0.6.8 (31 Jan 2023)\n\n### Changes\n\n* Close WebSocket connections with a code of 1000 (instead of 1001) when\n  shutting down the server (#89)\n* Use 100 acceptor processes by default (instead of 10)\n* Improvements to make WebSocket frame masking faster\n\n## 0.6.7 (17 Jan 2023)\n\n### Enhancements\n\n* Remove logging entirely when client connections do not contain a valid protocol\n* Refactor WebSocket support for about a 20% performance lift\n\n### Bug Fixes\n\n* Add `nodelay` option to test suite to fix artificially slow WebSocket perf tests\n\n## 0.6.6 (11 Jan 2023)\n\n### Enhancements\n\n* Log useful message when a TLS connection is made to plaintext server (#74)\n\n## 0.6.5 (10 Jan 2023)\n\n### Enhancements\n\n* Update Thousand Island to 0.5.15 (quiets logging in timeout cases)\n* Quiet logging in when client connections do not contain a valid protocol\n* Refactor HTTP/1 for about a 20% performance lift\n* Add WebSocket support to CI benchmark workflow\n* Doc updates\n\n### Bug Fixes\n\n* Allow multiple instances of Bandit to be started in the same node (#75)\n* Improve error handling in HTTP/1 when protocol errors are encountered (#74)\n"}},"code-of-conduct":{"__page":{"path":"/code-of-conduct","queries":[],"content":"# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nmat@geeky.net.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"}}}